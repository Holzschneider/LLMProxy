package io.github.stream29.proxy.relocate.com.aallam.openai.api.chat

import io.github.stream29.proxy.relocate.com.aallam.openai.api.chat.ChatRole
import io.github.stream29.proxy.relocate.com.aallam.openai.api.chat.internal.ContentSerializer
import kotlinx.serialization.SerialName
import kotlinx.serialization.Serializable


/**
 * The messages to generate chat completions for.
 */
@Serializable
data class ChatMessage(
    /**
     * The role of the author of this message.
     */
    @SerialName("role") val role: ChatRole,

    /**
     * The contents of the message.
     * **This is required for requests, and optional for responses**.
     */
    @SerialName("content") val messageContent: Content? = null,

    /**
     * The author's name of this message.
     * [name] is required if the role is `ChatRole.Function`, and it should be the name of the function whose response is
     * in the [content]. It May contain a-z, A-Z, 0-9, and underscores, with a maximum length of 64 characters.
     */
    @SerialName("name") val name: String? = null,

    /**
     * The name and arguments of a function that should be called, as generated by the model.
     */
    @Deprecated(message = "Deprecated in favor of toolCalls")
    @SerialName("function_call") val functionCall: FunctionCall? = null,

    /**
     * The tool calls generated by the model, such as function calls.
     */
    @SerialName("tool_calls") val toolCalls: List<ToolCall>? = null,

    /**
     * Tool call ID.
     */
    @SerialName("tool_call_id") val toolCallId: ToolId? = null,

    /**
     * Azure Content Filter Results
     */
    @SerialName("content_filter_results") val contentFilterResults: List<ContentFilterResults>? = null,

    /**
     * Azure Content Filter Offsets
     */
    @SerialName("content_filter_offsets") val contentFilterOffsets: List<ContentFilterOffsets>? = null,
) {

    constructor(
        role: ChatRole,
        content: String? = null,
        name: String? = null,
        functionCall: FunctionCall? = null,
        toolCalls: List<ToolCall>? = null,
        toolCallId: ToolId? = null,
        contentFilterResults: List<ContentFilterResults>? = null,
        contentFilterOffsets: List<ContentFilterOffsets>? = null,
    ) : this(
        role = role,
        messageContent = content?.let { TextContent(it) },
        name = name,
        functionCall = functionCall,
        toolCalls = toolCalls,
        toolCallId = toolCallId,
        contentFilterOffsets = contentFilterOffsets,
        contentFilterResults = contentFilterResults,
    )

    val content: String?
        get() = when (messageContent) {
            is TextContent? -> messageContent?.content
            else -> error("Content is not text")
        }

    @Suppress("FunctionName")
    companion object {

        /**
         * Create a system chat message.
         *
         * @param content the contents of the message.
         * @param name an optional name for the participant.
         * Provides the model information to differentiate between participants of the same role.
         */
        fun System(content: String? = null, name: String? = null): ChatMessage {
            return ChatMessage(
                role = ChatRole.System,
                messageContent = content?.let { TextContent(it) },
                name = name,
            )
        }

    }
}

/**
 * The contents of the chat message.
 */
@Serializable(with = ContentSerializer::class)
sealed interface Content

/**
 * The chat message content as text.
 */
@JvmInline
@Serializable
value class TextContent(val content: String) : Content

/**
 *  The chat message content as a list of content parts.
 */
@JvmInline
@Serializable
value class ListContent(val content: List<ContentPart>) : Content

/**
 * Represents a chat message part.
 */
@Serializable
sealed interface ContentPart

/**
 * Text content part.
 *
 * @param text the text content.
 */
@Serializable
@SerialName("text")
data class TextPart(@SerialName("text") val text: String) : ContentPart


