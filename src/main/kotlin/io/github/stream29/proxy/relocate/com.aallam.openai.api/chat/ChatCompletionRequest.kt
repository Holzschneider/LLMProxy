@file:Suppress("DEPRECATION")

package io.github.stream29.proxy.relocate.com.aallam.openai.api.chat

import io.github.stream29.proxy.relocate.com.aallam.openai.api.BetaOpenAI
import io.github.stream29.proxy.relocate.com.aallam.openai.api.model.ModelId
import kotlinx.serialization.SerialName
import kotlinx.serialization.Serializable
import kotlinx.serialization.json.JsonElement

/**
 * Creates a completion for the chat message.
 */
@Serializable
data class ChatCompletionRequest(
    /**
     * ID of the model to use.
     */
    @SerialName("model") val model: ModelId,

    /**
     * The messages to generate chat completions for.
     */
    @SerialName("messages") val messages: List<ChatMessage>,

    /**
     * Constrains effort on reasoning for reasoning models. Currently supported values are low, medium, and high.
     * Reducing reasoning effort can result in faster responses and fewer tokens used on reasoning in a response.
     */
    @SerialName("reasoning_effort") val reasoningEffort: Effort? = null,

    /**
     * What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random,
     * while lower values like 0.2 will make it more focused and deterministic.
     *
     * We generally recommend altering this or [topP] but not both.
     */
    @SerialName("temperature") val temperature: Double? = null,

    /**
     * An alternative to sampling with temperature, called nucleus sampling, where the model considers the results
     * of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass
     * are considered.
     *
     * We generally recommend altering this or [temperature] but not both.
     */
    @SerialName("top_p") val topP: Double? = null,

    /**
     * How many chat completion choices to generate for each input message.
     */
    @SerialName("n") val n: Int? = null,

    /**
     * Up to 4 sequences where the API will stop generating further tokens.
     */
    @SerialName("stop") val stop: List<String>? = null,

    /**
     * Whether to store the output of this chat completion request for use in our model distillation or evals products
     */
    @SerialName("store") val store: Boolean? = null,

    /**
     * The maximum number of tokens allowed for the generated answer. By default, the number of tokens the model can
     * return will be (4096 - prompt tokens).
     */
    @Deprecated(message = "Deprecated in favor of `max_completion_tokens`")
    @SerialName("max_tokens") val maxTokens: Int? = null,

    /**
     * An upper bound for the number of tokens that can be generated for a completion,
     * including visible output tokens and reasoning tokens.
     */
    @SerialName("max_completion_tokens") val maxCompletionTokens: Int? = null,

    /**
     * Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far,
     * increasing the model's likelihood to talk about new topics.
     *
     * [Read more](https://platform.openai.com/docs/api-reference/parameter-details)
     */
    @SerialName("presence_penalty") val presencePenalty: Double? = null,

    /**
     * Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so
     * far, decreasing the model's likelihood to repeat the same line verbatim.
     *
     * [Read more](https://platform.openai.com/docs/api-reference/parameter-details)
     */
    @SerialName("frequency_penalty") val frequencyPenalty: Double? = null,

    /**
     * Modify the likelihood of specified tokens appearing in the completion.
     *
     * Accepts a json object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value
     * from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling.
     * The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of
     * selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.
     */
    @SerialName("logit_bias") val logitBias: Map<String, Int>? = null,

    /**
     * A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse.
     */
    @SerialName("user") val user: String? = null,

    /**
     * A list of functions the model may generate JSON inputs for.
     */
    @Deprecated(message = "Deprecated in favor of tools")
    @SerialName("functions") val functions: List<ChatCompletionFunction>? = null,

    /**
     * Controls how the model responds to function calls. [FunctionMode.None] means the model does not call a function,
     * and responds to the end-user.
     * [FunctionMode.Auto] means the model can pick between an end-user or calling a function.
     * Specifying a particular function via [FunctionMode.Named] forces the model to call that function.
     * [FunctionMode.None] is the default when no functions are present.
     * [FunctionMode.Auto] is the default if functions are present.
     */
    @Deprecated(message = "Deprecated in favor of ToolChoice")
    @SerialName("function_call") val functionCall: FunctionMode? = null,

    /**
     * An object specifying the format that the model must output.
     *
     * Setting to [ChatResponseFormat.JsonObject] enables JSON mode, which guarantees the message the model generates is
     * valid JSON.
     *
     * **Important**: when using JSON mode, you must still instruct the model to produce JSON yourself via some
     * conversation message, for example, via your system message. If you don't do this, the model may generate
     * an unending stream of whitespace until the generation reaches the token limit, which may take a lot of time
     * and give the appearance of a "stuck" request. Also note that the message content may be partial (i.e., cut off)
     * if finish_reason="length", which indicates the generation exceeded `max_tokens` or the conversation exceeded
     * the max context length.
     */
    @SerialName("response_format") val responseFormat: ChatResponseFormat? = null,

    /**
     * A list of tools the model may call. Use this to provide a list of functions the model may generate JSON inputs for.
     */
    @SerialName("tools") val tools: List<Tool>? = null,

    /**
     * Controls which (if any) function is called by the model.
     *
     * - [ToolChoice.None] means the model will not call a function and instead generates a message.
     * - [ToolChoice.Auto] means the model can pick between generating a message or calling a function.
     * - Specifying a particular function via [ToolChoice.Named] (or [ToolChoice.function]) forces the model to call that function.
     *
     * [ToolChoice.None] is the default when no functions are present.[ToolChoice.Auto] is the default if functions are
     * present.
     */
    @SerialName("tool_choice") val toolChoice: ToolChoice? = null,

    /**
     * If specified, our system will make the best effort to sample deterministically, such that repeated requests with
     * the same seed and parameters should return the same result.
     * Determinism is not guaranteed, and you should refer to the `systemFingerprint` response parameter to monitor
     * changes in the backend.
     */
    @property:BetaOpenAI
    @SerialName("seed") val seed: Int? = null,

    /**
     * Whether to return log probabilities of the output tokens or not. If true,
     * returns the log probabilities of each output token returned in the content of message.
     */
    @SerialName("logprobs") val logprobs: Boolean? = null,

    /**
     * An integer between 0 and 20 specifying the number of most likely tokens to return at each token position,
     * each with an associated log probability. logprobs must be set to true if this parameter is used.
     */
    @SerialName("top_logprobs") val topLogprobs: Int? = null,

    /**
     * A unique identifier representing the Multi LORA reserved instance.
     */
    @SerialName("instance_id") val instanceId: String? = null,

    /**
     * Options for streaming response. Only used when in streaming mode.
     */
    @SerialName("stream_options") val streamOptions: StreamOptions? = null,
    val stream: Boolean = true,

    @SerialName("extra_body")
    val extraBody: JsonElement? = null,
)

